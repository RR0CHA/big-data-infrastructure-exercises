import os
from datetime import datetime, timedelta
from typing import Optional

import boto3
import psycopg2
from dotenv import load_dotenv
from fastapi import APIRouter, HTTPException, status
from pydantic import BaseModel

from bdi_api.settings import DBCredentials, Settings

settings = Settings()
db_credentials = DBCredentials()
BASE_URL = "https://samples.adsbexchange.com/readsb-hist/2023/11/01/"

s8 = APIRouter(
    responses={
        status.HTTP_404_NOT_FOUND: {"description": "Not found"},
        status.HTTP_422_UNPROCESSABLE_ENTITY: {"description": "Something is wrong with the request"},
    },
    prefix="/api/s8",
    tags=["s8"],
)

# Load environment variables from .env file
load_dotenv()

# Retrieve AWS credentials from environment variables
aws_access_key = os.getenv("AWS_ACCESS_KEY_ID")
aws_secret_key = os.getenv("AWS_SECRET_ACCESS_KEY")
aws_session_token = os.getenv("AWS_SESSION_TOKEN")

db_schema = os.getenv("BDI_DB_SCHEMA")
db_table = os.getenv("BDI_DB_TABLE")
db_spec_table = os.getenv("BDI_DB_SPEC_TABLE")
db_fuel_table = os.getenv("BDI_DB_FUEL_TABLE")

# Create a session using the loaded credentials
session = boto3.Session(
    aws_access_key_id=aws_access_key,
    aws_secret_access_key=aws_secret_key,
    aws_session_token=aws_session_token
)

class AircraftReturn(BaseModel):
    # DO NOT MODIFY IT
    icao: str
    registration: Optional[str]
    type: Optional[str]
    owner: Optional[str]
    manufacturer: Optional[str]
    model: Optional[str]


@s8.get("/aircraft/")
def list_aircraft(num_results: int = 100, page: int = 0) -> list[AircraftReturn]:
    """List all the available aircraft, its registration and type ordered by
    icao asc FROM THE DATABASE

    ADDITIONS:
    * Instead of passing a JSON, use pydantic to return the correct schema
       See: https://fastapi.tiangolo.com/tutorial/response-model/
    * Enrich it with information from the aircrafts database (see README for link)
      * `owner`  (`ownop` field in the aircrafts DB)
      * `manufacturer` and `model`

    """
    # TODO

    offset = page * num_results

    query = f"""
    SELECT distinct
        d.icao,
        d.registration,
        d.type,
        i.ownop AS owner,
        i.manufacturer,
        i.model
    FROM
        {db_schema}.{db_table} d
    LEFT JOIN
        {db_schema}.{db_spec_table} i ON d.icao = i.icao
    WHERE
        d.icao IS NOT NULL
    ORDER BY icao asc
    LIMIT %s OFFSET %s;
    """

    try:
        # Connect to PostgreSQL database
        conn = psycopg2.connect(
            host=db_credentials.host,
            database=db_credentials.database,
            user=db_credentials.username,
            password=db_credentials.password,
            port=db_credentials.port
        )

        cursor = conn.cursor()
        cursor.execute(query, (num_results, offset))
        records = cursor.fetchall()

        #close the connection
        cursor.close()
        conn.close()

    except Exception as e:
        print("Error:", e)

    columns = ["icao", "registration", "type", "owner", "manufacturer", "model"]
    #result = [dict(zip(columns, row)) for row in records]

    result = [AircraftReturn(**dict(zip(columns, row))) for row in records]
    return result


class AircraftCO2(BaseModel):
    # DO NOT MODIFY IT
    icao: str
    hours_flown: float
    """Co2 tons generated"""
    co2: Optional[float]


@s8.get("/aircraft/{icao}/co2")
def get_aircraft_co2(icao: str, day: str) -> AircraftCO2:
    """Returns the CO2 generated by the aircraft **in a given day** (e.g. "2025-01-01")

    Compute the hours flown by the aircraft (assume each row we have is 5s).

    Then, you can use these metrics:

    ```python
    fuel_used_kg = fuel_used_gal * 3.04
        c02_tons = (fuel_used_kg * 3.15 ) / 907.185
        ```

    Use the gallon per hour from https://github.com/martsec/flight_co2_analysis/blob/main/data/aircraft_type_fuel_consumption_rates.json
    The key is the `icaotype`

    ```json
    {
      ...,
      "GLF6": { "source":"https://github.com/Jxck-S/plane-notify",
        "name": "Gulfstream G650",
        "galph": 503,
        "category": "Ultra Long Range"
      },
    }

    If you don't have the fuel consumption rate, return `None` in the `co2` field
    ```
    """
    # TODO

    try:
        #day_to_compute = day
        start = datetime.strptime(day, "%Y-%m-%d")
        end = start + timedelta(days=1)
        start_ts = start.timestamp()
        end_ts = end.timestamp()
    except Exception as err:
        print("Error:", err)
        raise HTTPException(status_code=422, detail="Something is wrong with the request") from err

    try:
        query = f"""
        SELECT
            d.icao,
            d.type,
            i.galph,
            count(*) as row_count
        FROM
            {db_schema}.{db_table} d
        LEFT JOIN
            {db_schema}.{db_fuel_table} i ON d.type = i.aircraft_type
        WHERE
            d.icao = '{icao}' and d.timestamp >= '{start_ts}'
            and  d.timestamp < '{end_ts}'
        GROUP BY
            d.icao,
            d.type,
            i.galph;
        """

        # Connect to PostgreSQL database
        conn = psycopg2.connect(
            host=db_credentials.host,
            database=db_credentials.database,
            user=db_credentials.username,
            password=db_credentials.password,
            port=db_credentials.port
        )


        cursor = conn.cursor()
        cursor.execute(query)
        records = cursor.fetchall()
        hours_flown = 0
        c02_tons = 0


        if records:
            row_count = int(records[0][3])
            hours_flown = row_count * 5 / 3600 #assuming each row we have is 5s

            if records[0][2] is None:
                c02_tons = None
            else:
                galph = int(records[0][2])
                fuel_used_gal = galph * hours_flown
                fuel_used_kg = fuel_used_gal * 3.04
                c02_tons = (fuel_used_kg * 3.15 ) / 907.185
        else:
            raise HTTPException(status_code=404, detail="No records found")


    except HTTPException as http_exc:
        raise http_exc

    except Exception as e:
        print("Error:", e)

    finally:
        #close the connection
        cursor.close()
        conn.close()

    return AircraftCO2(icao=icao, hours_flown=hours_flown, co2=c02_tons)
